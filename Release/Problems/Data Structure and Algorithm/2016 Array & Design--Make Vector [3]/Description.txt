2016 Array & Design--Make Vector
Difficulty 3/10
Time Limit 1000ms

【Description】
在C++的STL中有vector类，但C语言没有面向对象编程，我们需要模拟一个Vector的结构体并实现其部分功能。

【FrameWork】
C Version Only:
#include <stdlib.h>

typedef struct {
	int * data;
	size_t size;		//表示数组元素个数
	size_t capacity;	//表示数组实际能容纳的元素个数
} Vector;

//用于创建一个Vector对象，可储存的元素个数为numsOfElement
Vector * VectorCreate(size_t numsOfElement) {

}

//用于重新分配内存，调整的是数组实际能容纳的元素个数。该函数只允许在对数组元
//素个数有修改，可能要超出或远低于实际容纳量的情况下才能调用它
void VectorReallocate(Vector * vec, int newSize) {
	
}

//在数组现有元素的末端加入一个元素
void VectorPushBack(Vector * vec, int val) {

}

//删去数组末端的元素
void VectorPopBack(Vector * vec) {

}

//将数组元素个数置零，但实际元素容量置为1
void VectorClear(Vector * vec) {

}

//将元素val插入到数组的索引pos位置上
void VectorInsertValue(Vector * vec, size_t pos, int val) {

}

//将数组索引区间[beg,end)的元素删除
void VectorErase(Vector * vec, size_t beg, size_t end) {

}

//释放Vector内存
void VectorFree(Vector * vec) {
	
}

/******
示例：
Vector * nums = VectorCreate(0);
VectorPushBack(nums, 1);   //nums->data[0]为1  nums->size为1
VectorPushBack(nums, 3);   //nums->data[1]为3  nums->size为2
VectorPopBack(nums);       //nums->data[1]被删去  nums->size为1
VectorPushBack(nums, 4);   //nums->data[1]为4  nums->size为2
VectorInsertValue(nums, 1, 2);   //nums->data[1]处插入2，右移后面的元素
                                 //nums->size为3
VectorInsertValue(nums, 2, 3);   //nums->data[2]处插入2，右移后面的元素
                                 //nums->size为4 
VectorErase(nums, 1, 3);         //删去nums->data[1]和nums->data[2]
                                 //nums->size为2
printf("%d %d", nums->data[0], nums->data[1]);
VectorClear(nums);   //nums->size和nums->capacity为0
VectorFree(nums);    //释放内存
******/

【Source】
X_Jun
